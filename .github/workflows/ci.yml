name: CI (Quick Checks)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

# Note: For comprehensive multi-platform testing, see:
# - .github/workflows/multi-platform-ci.yml
# - .github/workflows/build-and-run.yml

jobs:
  check:
    name: Check and Lint
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy, rust-src
          targets: aarch64-unknown-uefi

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check code format
        run: cargo +nightly fmt --all -- --check

      # - name: Run clippy
      #   run: cargo clippy --workspace --all-targets -- -D warnings
      #
      - name: Check documentation
        run: |
          (cd oso_kernel && cargo build)
          cargo doc --workspace --no-deps --document-private-items

  build:
    name: Build aarch64
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
          targets: aarch64-unknown-uefi

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-aarch64-${{ hashFiles('**/Cargo.lock') }}

      - name: Build kernel for aarch64
        run: |
          cd oso_kernel
          cargo build --release

      - name: Build loader for aarch64
        run: |
          cd oso_loader
          cargo build --release

  test:
    name: Test
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests for std crates
        run: |
          # Test crates that can run in std environment
          (cd oso_kernel && cargo b)
          (cd oso_proc_macro_logic && nix develop --command cargo t)
          (cd oso_error && cargo t)
          (cd xtask && nix develop --command cargo t)

  integration:
    name: Integration Test
    runs-on: ubuntu-24.04-arm
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup development environment
        run: |
          nix develop --command bash -c "echo 'Development environment ready'"
          # Verify tools are available
          nix develop --command qemu-system-aarch64 --version

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
          targets: aarch64-unknown-uefi

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Build xtask
        run: nix develop --command cargo build -p xtask

      - name: Test build process (aarch64 only)
        run: |
          # Test that the build process works without actually running QEMU
          timeout 30s nix develop --command cargo run -p xtask -- --dry-run || true

  security:
    name: Security Audit
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
          targets: aarch64-unknown-uefi

      - name: Check for no_std compliance
        run: |
          # Verify that kernel and loader don't accidentally include std dependencies
          cd oso_kernel && cargo tree --target aarch64-unknown-none-elf.json | grep -v "std" || echo "Kernel dependencies look good"
          cd ../oso_loader && cargo tree --target aarch64-unknown-uefi | grep -v "std" || echo "Loader depeandencies look good"
