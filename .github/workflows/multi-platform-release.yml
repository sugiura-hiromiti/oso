name: Multi-Platform Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for manual release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release Artifacts
    strategy:
      matrix:
        os: [ubuntu-24.04-arm, macos-14]
        include:
          - os: ubuntu-24.04-arm
            platform: linux
            artifact_suffix: linux-aarch64
          - os: macos-14
            platform: macos
            artifact_suffix: macos-aarch64
    runs-on: ${{ matrix.os }}
    
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup development environment
      run: |
        nix develop --command bash -c "echo 'Development environment ready'"
        # Verify tools are available
        nix develop --command qemu-system-aarch64 --version
    
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src
        targets: aarch64-unknown-uefi
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build kernel
      run: |
        cd oso_kernel
        nix develop --command cargo build --target aarch64-unknown-none-elf.json --release
    
    - name: Copy kernel binary for loader
      run: |
        # The loader needs the kernel ELF file for its proc macros
        mkdir -p target/
        cp target/aarch64-unknown-none-elf/release/oso_kernel target/oso_kernel.elf
    
    - name: Build loader
      run: |
        cd oso_loader
        nix develop --command cargo build --target aarch64-unknown-uefi --release
    
    - name: Build xtask
      run: nix develop --command cargo build -p xtask --release
    
    - name: Test build on platform
      run: |
        echo "Testing build on ${{ matrix.platform }}"
        timeout 10s nix develop --command cargo run -p xtask -- --dry-run || echo "Build test completed"
    
    - name: Create platform-specific release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Copy binaries
        cp target/aarch64-unknown-none-elf/release/oso_kernel release-artifacts/
        cp target/aarch64-unknown-uefi/release/oso_loader.efi release-artifacts/
        cp target/release/xtask release-artifacts/
        
        # Create platform info file
        echo "Platform: ${{ matrix.platform }}" > release-artifacts/PLATFORM_INFO.txt
        echo "Built on: $(date)" >> release-artifacts/PLATFORM_INFO.txt
        echo "Rust version: $(rustc --version)" >> release-artifacts/PLATFORM_INFO.txt
        echo "QEMU version: $(nix develop --command qemu-system-aarch64 --version | head -n1)" >> release-artifacts/PLATFORM_INFO.txt
        
        # Create checksums
        cd release-artifacts
        if [ "${{ matrix.platform }}" = "macos" ]; then
          shasum -a 256 * > checksums-${{ matrix.artifact_suffix }}.txt
        else
          sha256sum * > checksums-${{ matrix.artifact_suffix }}.txt
        fi
        cd ..
        
        # Create tarball
        tar -czf oso-${{ steps.get_tag.outputs.tag_name }}-${{ matrix.artifact_suffix }}.tar.gz -C release-artifacts .
    
    - name: Upload platform artifacts
      uses: actions/upload-artifact@v3
      with:
        name: oso-release-${{ matrix.artifact_suffix }}-${{ steps.get_tag.outputs.tag_name }}
        path: oso-${{ steps.get_tag.outputs.tag_name }}-${{ matrix.artifact_suffix }}.tar.gz
        retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [build-release]
    runs-on: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./release-downloads
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find release-downloads -name "*.tar.gz" -exec cp {} release-assets/ \;
        ls -la release-assets/
    
    - name: Generate release notes
      run: |
        cat > release-notes.md << 'EOF'
        # oso ${{ needs.build-release.outputs.tag_name }}
        
        ## Multi-Platform Release
        
        This release includes builds for multiple platforms:
        
        - **Linux (aarch64)**: Built on Ubuntu 24.04 ARM
        - **macOS (aarch64)**: Built on macOS 14
        
        ## Files
        
        - `oso-${{ needs.build-release.outputs.tag_name }}-linux-aarch64.tar.gz`: Linux build
        - `oso-${{ needs.build-release.outputs.tag_name }}-macos-aarch64.tar.gz`: macOS build
        
        Each archive contains:
        - `oso_kernel`: The kernel binary
        - `oso_loader.efi`: UEFI bootloader
        - `xtask`: Build automation tool
        - `PLATFORM_INFO.txt`: Build environment information
        - `checksums-*.txt`: SHA256 checksums
        
        ## Usage
        
        Extract the appropriate archive for your platform and run:
        ```bash
        ./xtask
        ```
        
        ## Requirements
        
        - QEMU (qemu-system-aarch64)
        - For macOS: hdiutil (built-in)
        - For Linux: sudo, mount, umount, losetup
        
        ## Changes
        
        EOF
        
        # Add git log since last tag if available
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          echo "### Commits since last release:" >> release-notes.md
          git log --oneline $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release-notes.md
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build-release.outputs.tag_name }}
        name: oso ${{ needs.build-release.outputs.tag_name }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(needs.build-release.outputs.tag_name, 'alpha') || contains(needs.build-release.outputs.tag_name, 'beta') || contains(needs.build-release.outputs.tag_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify-release:
    name: Verify Release Artifacts
    needs: [create-release]
    strategy:
      matrix:
        os: [ubuntu-24.04-arm, macos-14]
        include:
          - os: ubuntu-24.04-arm
            platform: linux
            artifact_suffix: linux-aarch64
          - os: macos-14
            platform: macos
            artifact_suffix: macos-aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Download release artifact
      uses: actions/download-artifact@v3
      with:
        name: oso-release-${{ matrix.artifact_suffix }}-${{ needs.build-release.outputs.tag_name }}
    
    - name: Verify artifact integrity
      run: |
        echo "Verifying ${{ matrix.platform }} release artifact"
        
        # Extract and verify contents
        tar -tzf oso-${{ needs.build-release.outputs.tag_name }}-${{ matrix.artifact_suffix }}.tar.gz
        tar -xzf oso-${{ needs.build-release.outputs.tag_name }}-${{ matrix.artifact_suffix }}.tar.gz
        
        # Check required files exist
        test -f oso_kernel || (echo "❌ oso_kernel missing" && exit 1)
        test -f oso_loader.efi || (echo "❌ oso_loader.efi missing" && exit 1)
        test -f xtask || (echo "❌ xtask missing" && exit 1)
        test -f PLATFORM_INFO.txt || (echo "❌ PLATFORM_INFO.txt missing" && exit 1)
        
        # Verify checksums
        if [ "${{ matrix.platform }}" = "macos" ]; then
          shasum -a 256 -c checksums-${{ matrix.artifact_suffix }}.txt
        else
          sha256sum -c checksums-${{ matrix.artifact_suffix }}.txt
        fi
        
        echo "✅ All files verified successfully"
        
        # Show platform info
        echo "=== Platform Info ==="
        cat PLATFORM_INFO.txt
