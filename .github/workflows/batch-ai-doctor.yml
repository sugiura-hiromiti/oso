name: Daily AI PR Health Sweep

on:
  schedule:
    # Midnight JST = 15:00 UTC
    - cron: "0 15 * * *"

permissions:
  contents: read
  issues: write
  pull-requests: read
  actions: read
  models: read

jobs:
  scan-prs:
    runs-on: ubuntu-latest
    outputs:
      pr_list: ${{ steps.set.outputs.pr_list }}
    steps:
      - name: Get start of yesterday in JST as UTC
        id: date
        run: |
          # Start of yesterday in JST (UTC+9) converted to UTC
          utc_since=$(date -u -d "$(date +%Y-%m-%d --date='yesterday') 15:00:00" +%Y-%m-%dT%H:%M:%SZ)
          echo "utc_since=$utc_since" >> $GITHUB_OUTPUT

      - name: List yesterdayâ€™s PRs (JST, including reopened)
        id: list_prs
        uses: actions/github-script@v7
        with:
          script: |
            const since = process.env.UTC_SINCE;
            const prs = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              per_page: 100
            });

            const targetPRs = [];

            for (const pr of prs) {
              const created = new Date(pr.created_at);
              if (created >= new Date(since)) {
                targetPRs.push(pr.number);
                continue;
              }

              // Fetch issue events to detect reopen
              const events = await github.paginate(github.rest.issues.listEvents, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                per_page: 100
              });

              const reopened = events.some(e =>
                e.event === "reopened" &&
                new Date(e.created_at) >= new Date(since)
              );

              if (reopened) {
                targetPRs.push(pr.number);
              }
            }

            return targetPRs;
        env:
          UTC_SINCE: ${{ steps.date.outputs.utc_since }}

      - name: Set PR list output
        id: set
        run: echo "pr_list=${{ steps.list_prs.outputs.result }}" >> $GITHUB_OUTPUT

  analyze-prs:
    needs: scan-prs
    runs-on: ubuntu-latest
    if: ${{ needs.scan-prs.outputs.pr_list != '[]' }}
    strategy:
      matrix:
        pr: ${{ fromJSON(needs.scan-prs.outputs.pr_list) }}
    steps:
      - name: Get PR details
        id: details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ matrix.pr }}
            });
            return pr.data;

      - name: Get last CI status
        id: status
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ fromJSON(steps.details.outputs.result).head.ref }}',
              per_page: 1
            });
            if (runs.data.workflow_runs.length) {
              return runs.data.workflow_runs[0].conclusion || "unknown";
            }
            return "no-run";

      - name: Fetch logs
        if: ${{ steps.status.outputs.result == 'failure' }}
        run: |
          gh run view $(gh run list --branch "${{ fromJSON(steps.details.outputs.result).head.ref }}" --json databaseId --jq '.[0].databaseId') --log > ci_logs.txt

      - name: AI severity + summary
        id: ai
        if: ${{ steps.status.outputs.result == 'failure' }}
        uses: github/interactive-action@v1
        with:
          model: openai/gpt-5
          messages: |
            [
              {"role":"system","content":"You are an expert reviewer. Classify CI failure severity (critical/moderate/minor/none) and summarize issues. Return JSON: {\"severity\":...,\"summary\":...}."},
              {"role":"user","content":"PR Title: ${{ fromJSON(steps.details.outputs.result).title }}\nLogs:\n$(tail -n 200 ci_logs.txt)"}
            ]

      - name: Parse AI result
        if: ${{ steps.status.outputs.result == 'failure' }}
        id: parse
        run: |
          echo '${{ steps.ai.outputs.message }}' | jq -r '.severity,.summary' \
            | awk 'NR==1{print "severity="$0} NR==2{print "summary="$0}' >> $GITHUB_OUTPUT

      - name: Search existing issue
        id: search
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = "${{ matrix.pr }}";
            const issues = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} in:title "AI Review: PR #${prNumber}"`
            });
            return issues.data.items.length ? issues.data.items[0] : null;

      - name: Close and comment on fix
        if: ${{ steps.status.outputs.result == 'success' && steps.search.outputs.result != 'null' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue = JSON.parse('${{ steps.search.outputs.result }}');
            const now = new Date().toISOString();
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `### [${now}] CI Passed\nAuto-closing issue.`
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: "closed"
            });

      - name: Create or comment on failure
        if: ${{ steps.status.outputs.result == 'failure' && steps.parse.outputs.severity != 'none' }}
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = "${{ matrix.pr }}";
            const issue = JSON.parse('${{ steps.search.outputs.result }}');
            const severity = "${{ steps.parse.outputs.severity }}";
            const summary = "${{ steps.parse.outputs.summary }}";
            const now = new Date().toISOString();
            const commentBody = `### [${now}] CI Failure Analysis\n**Severity:** ${severity}\n\n${summary}`;

            if (issue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: commentBody
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: "open",
                labels: ["ai-review", "ci-failure", `severity:${severity}`]
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `AI Review: PR #${prNumber}`,
                body: `Tracking CI health for PR #${prNumber}. Auto-updated daily.`,
                labels: ["ai-review", "ci-failure", `severity:${severity}`]
              });

              const newIssue = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: "ai-review,ci-failure",
                state: "open",
                per_page: 1,
                sort: "created",
                direction: "desc"
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: newIssue.data[0].number,
                body: commentBody
              });
            }

  daily-digest:
    needs: analyze-prs
    runs-on: ubuntu-latest
    steps:
      - name: Create/Update Daily Digest Issue
        uses: actions/github-script@v7
        with:
          script: |
            const now = new Date().toISOString().slice(0,10);
            const title = `Daily AI Digest - ${now}`;
            const digestIssues = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} in:title "${title}"`
            });

            const summary = `Daily CI report generated at ${now} (JST midnight).\n- Failed PRs: listed above in their issues.\n- Passed PRs: auto-closed issues.\n\n(See individual AI Review issues for details.)`;

            if (digestIssues.data.items.length) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: digestIssues.data.items[0].number,
                body: summary
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body: summary,
                labels: ["ai-digest"]
              });
            }
